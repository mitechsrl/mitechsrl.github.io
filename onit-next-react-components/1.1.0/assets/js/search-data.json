{"0": {
    "doc": "Ace Code Editor",
    "title": "Ace Code Editor",
    "content": "1. TOC {:toc} --- # Ace Code editor Ace-based Editor component. For info see [https://www.npmjs.com/package/react-ace](https://www.npmjs.com/package/react-ace). ![Ace code editor example](..\\..\\images\\f3260477ddcd05eb368822ab532fe53c.PNG) ``` js import { Editor } from '@mitech/onit-next-react-components/dist/codeEditor/AceEditor'; ``` The component adapts its size to fill 100% of parent height and width. #### Props {: .no_toc} **buttons** [List](..\\..\\ONIT_LIST\\List.html) of buttons definitions to add near your editor to do different operations. Each button must follow the structure: ```js { className: string, // css classes to be applied to the button content: string or React.component // content of the button } ``` **fontSize** Editor text font size. Defaults to 15 px. **mode** Ace editor mode flag. See [https://github.com/thlorenz/brace/tree/master/mode](https://github.com/thlorenz/brace/tree/master/mode) for more info **name** Optional editor header title **onChange** Editing tect changer callback. This method is called for each text change in the editor **onSave** Internally triggered save event. Save event can be triggered by the user by pressing CTRL+S. **readonly** Prevent the user to change the editor content. Defaults to false. **setOptions** Full ACE options object. See [https://github.com/ajaxorg/ace/wiki/Configuring-Ace](https://github.com/ajaxorg/ace/wiki/Configuring-Ace) for more info **theme** Editor theme. Defaults to Chrome **value** Current editor text content value ",
    "url": "/onit-next-react-components/1.1.0/docs/CODE_EDITORS/ACE_CODE_EDITOR/Ace-Code-Editor.html",
    "relUrl": "/docs/CODE_EDITORS/ACE_CODE_EDITOR/Ace-Code-Editor.html"
  },"1": {
    "doc": "Ace DIff Editor",
    "title": "Ace DIff Editor",
    "content": "1. TOC {:toc} --- # AceDiffEditor Ace diff editor. A very simple wrapper component to Ace-diff. It shows two strings in a two-column layout and mark differneces between them. See [https://github.com/ace-diff/ace-diff](Ace-diff on GitHub) for more info ![Ace diff editor](..\\..\\images\\5d711855a1a3eea776b1ca23d29eb844.png) ```jsx import {AceDiffEditor} from '@mitech/onit-next-react-components/dist/diffEditor/' ``` #### Params {: .no_toc} **header** A render function to print out the component header **text1** Text to show in the left column #### Props {: .no_toc} **text2** Text to show in the right column ",
    "url": "/onit-next-react-components/1.1.0/docs/CODE_EDITORS/ACE_DIFF_EDITOR/Ace-DIff-Editor.html",
    "relUrl": "/docs/CODE_EDITORS/ACE_DIFF_EDITOR/Ace-DIff-Editor.html"
  },"2": {
    "doc": "Breadcrumb",
    "title": "Breadcrumb",
    "content": "1. TOC {:toc} --- # OnitBreadcrumb Bootstrap based breadcrumb Apart showing props.items in a breadcrumb, it can also resolve routes if the user passed in a route id. Pass an item as {title: tring, routeId: string, routeParams: string} to perform an async resolve call to get the actual link represented by that route id. The routeId is defined in the backend at the moment of the express declaration ```js import {OnitBreadcrumb} from '@mitech/onit-next-react-components/dist/breadcrumb/OnitBreadcrumb' ``` #### Props {: .no_toc} **items** Array of items to be displayed. The single object can be defined as one of the following: ```js { id: string, title: string, href: string } ``` ```js { id: string, title: string, routeId: string, routeParams: string } ``` Omitting the link informations (href or routeid/routeParams) will make the item not clickable **className** Css class to be applied to the container **behavior** Either \"fixed\" (the breadcrumb section will not be scrollable and any overflowing text gets truncated with ellipses) or \"scrollable\" (horizontally scrollable section with no text truncation). **hasMargin** **children** Any components to be displayed at the right part of the breadcrumb **padding** A bootstrap-like padding (e.g.: 'px-3', 'p-0', 'pl-1 pt-2 pb-4', etc.) ",
    "url": "/onit-next-react-components/1.1.0/docs/BREADCRUMB/Breadcrumb.html",
    "relUrl": "/docs/BREADCRUMB/Breadcrumb.html"
  },"3": {
    "doc": "Buttons",
    "title": "Buttons",
    "content": "1. TOC {:toc} --- # OnitButton Generic bootstrap based button. This component implement a basic button with some added logic ```js import {OnitButton} from '@mitech/onit-next-react-components/dist/buttons' This is the button content. You can also add some font Awesome icon ``` #### Props {: .no_toc} **children** Anything to punt in the button **disabls** Make the button not clickable and slightly less faded out **managed** If false, do not automatically set the busy state **onClick** Function to be called on btn click. The click event passed to this function will have some additional functions: - **event.target.setEnabled(boolean)** set the enabled status for the button - **event.target.setWorking(boolean)** set the working state(display a spinner instead of childs) of the button - **event.target.ready()** equivalent of setEnabled(true) && setWorking(false) - **event.target.busy()** equivalent of setEnabled(false) && setWorking(false) **className** Css classes to be applied to the button **tooltip** [Tooltip](..\\TOOLTIP\\Tooltip.html) content ",
    "url": "/onit-next-react-components/1.1.0/docs/BUTTONS/Buttons.html",
    "relUrl": "/docs/BUTTONS/Buttons.html"
  },"4": {
    "doc": "Checkbox",
    "title": "Checkbox",
    "content": "1. TOC {:toc} --- # OnitCheckbox Onit generic checkbox component. ```js import {OnitCheckbox} from '@mitech/onit-next-react-components/dist/forms/OnitCheckbox' ``` #### Props {: .no_toc} **readOnly** Make this field not editable **disabled** Set the field as blocked & non editable (with custom classes and behaviors) **id** Id for the underlaying html5 checkbox. Generated Automatically if none is passed in **label** Label to be displayed close to the checkbox **onChange** Onchange event as defined by react input handling. Must be a function accepting two parameters: ```js onchange(event, source){} ``` **className** Css class names attached to the html5 input tag **checked** [Checkbox](..\\..\\FORM_COMPONENTS\\ONIT_CHECKBOX\\Checkbox.html) value **source** Generic object returned with the onChange function as second parameter # OnitCheckbox Generic checkbox ```js import {OnitRadioButton} from '@mitech/onit-next-react-components/dist/forms/OnitRadioButton' ``` #### Props {: .no_toc} **readOnly** Make this field not editable **id** Id for the underlaying html5 checkbox. Generated Automatically if none is passed in **label** Label to be displayed close to the checkbox **onChange** Onchange event as defined by react input handling. Must be a function accepting two parameters: ```js onchange(event, source){} ``` **className** Css class names attached to the html5 input tag **checked** [Checkbox](..\\..\\FORM_COMPONENTS\\ONIT_CHECKBOX\\Checkbox.html) value **source** Generic object returned with the onChange function as second parameter ",
    "url": "/onit-next-react-components/1.1.0/docs/FORM_COMPONENTS/ONIT_CHECKBOX/Checkbox.html",
    "relUrl": "/docs/FORM_COMPONENTS/ONIT_CHECKBOX/Checkbox.html"
  },"5": {
    "doc": "Date input",
    "title": "Date input",
    "content": "1. TOC {:toc} --- # OnitDateInput Onit DateInput component ```js import {OnitDateInput} from '@mitech/onit-next-react-components/dist/forms/OnitDateInput' ``` #### Props {: .no_toc} **readOnly** Make this field not editable **disabled** Set the field as blocked & non editable (with custom classes and behaviors) **id** Id for the datePicker container **source** Generic object returned with the onChange function as second parameter **onChange** Onchange event as defined by react input handling. Must be a function accepting two parameters: ```js onchange(event, source){} ``` **className** Css class names attached to the html5 input tag **value** Input value ",
    "url": "/onit-next-react-components/1.1.0/docs/FORM_COMPONENTS/ONIT_DATE_IMPUT/Date-input.html",
    "relUrl": "/docs/FORM_COMPONENTS/ONIT_DATE_IMPUT/Date-input.html"
  },"6": {
    "doc": "Date time input",
    "title": "Date time input",
    "content": "1. TOC {:toc} --- # OnitDateTimeInput [Date time input](..\\..\\FORM_COMPONENTS\\ONIT_DATE_TIME_INPUT\\Date-time-input.html) component ```js import {OnitDateTimeInput} from '@mitech/onit-next-react-components/dist/forms/OnitDateTimeInput' ``` #### Props {: .no_toc} **readOnly** Make this field not editable **disabled** Set the field as blocked & non editable (with custom classes and behaviors) **source** Generic object returned with the onChange function as second parameter **onChange** Onchange event as defined by react input handling. Must be a function accepting two parameters: ```js onchange(event, source){} ``` **className** Css class names attached to the html5 input tag **value** Input value ",
    "url": "/onit-next-react-components/1.1.0/docs/FORM_COMPONENTS/ONIT_DATE_TIME_INPUT/Date-time-input.html",
    "relUrl": "/docs/FORM_COMPONENTS/ONIT_DATE_TIME_INPUT/Date-time-input.html"
  },"7": {
    "doc": "Debounce",
    "title": "Debounce",
    "content": "1. TOC {:toc} --- # Debounce ``` function debounce(callback, timeout = 500) ``` Perform a debounce effect over a function call. Just define a debounced function once, and then call debounced as many times you want. The effective internal implemented function will be executed once after the timeout expires ```js import {debounce} from '@mitech/onit-next-react-components/dist/debounce' const debouncedCall = debounce((...params)=>{ console.log(\"called with \", ...params); },500); debouncedCall(parameter1, parameter2,..., parameterN); // call as many time you want ``` You can manage the execution with the debounced mathods: - **debounced.stop()** to stop the internal timer and never call callback - **debounced.setNewTime(N)** to set the timeout to N ms. Will be affected by subsequent call. - **debounced.runNow(...args)** to stop the debounce effect and run the function immediately #### Params {: .no_toc} **callback** function to be called after the treshold timout. Any method you pass to your debounced call will be spread to the callback params. **timeout** treshold timeout. Defaults to 500 ms. ",
    "url": "/onit-next-react-components/1.1.0/docs/DEBOUNCE/Debounce.html",
    "relUrl": "/docs/DEBOUNCE/Debounce.html"
  },"8": {
    "doc": "Drag&drop file",
    "title": "Drag&drop file",
    "content": "1. TOC {:toc} --- # OnitDragDropFileArea File drag&drop component. ![drag&drop file](..\\..\\images\\eb9a39124aa53603537a33cce8b97a40.png) ```js import {OnitDragDropFileArea} from '@mitech/onit-next-react-components/dist/dragDrop' ``` The component adapt its size to entirely fill the parent container. ## Props ### busy If true, set a spinner and prevent other file drop. Tipically used while uploading. ### disabled Enable or disable this component. Disabling it prevent user interactions. ### disabled String for info. If set, display this string instead of the default icon/label when the component is not hovered with the mouse (example: the previously draged file data) ### dropHereLabel Label to be shown in the drop area ### fileReceived Callback function called on file loaded. Accepted function signature: ```js fileReceived(data, metadata, dropAreaCommands){ // dropAreaCommands.busy() set a spinner // dropAreaCommands.ready() remove spinner } ``` ### uploadDescriptionLabel Label to be displayed as upload description ### uploadLabel Label to be shown in the 'open file button' ### uploadingLabel Label to be displayed while uploading the dropped file ",
    "url": "/onit-next-react-components/1.1.0/docs/DRAG_DROP/DRAG_DROP_FILE_AREA/Drag-drop-file.html",
    "relUrl": "/docs/DRAG_DROP/DRAG_DROP_FILE_AREA/Drag-drop-file.html"
  },"9": {
    "doc": "Dual column drag&drop",
    "title": "Dual column drag&drop",
    "content": "1. TOC {:toc} --- # OnitDualColumnDragDrop Dual column drag and drop component shows a couple of columns in which you can drag&drop items between them. The item are represented by badges with icons, and are grouped into two columns: enabled and available. Since this component is used to select some properties in the bucket of all properties, the column enabled represent the \"to be applied\" or \"applied properties\", the other column, \"available\" represent the list of properties that can be applied id dragged onto \"enabled\" ```js import {OnitDualColumnDragDrop} from '@mitech/onit-next-react-components/dist/dragDrop/OnitDualColumnDragDrop' ``` #### Props {: .no_toc} **available:** [List](..\\..\\ONIT_LIST\\List.html) of available items (displayed into one column). Must me an array of object: ```js { id: PropTypes.string, description: PropTypes.string } ``` This field is required. **availableLabel** Label to be displayed on top of te available column **badgeClassName** String or function returning a string for the css class names to be applied to the badges **badgeDescription** **draggableCheck** check if the current item can be dragged. This function must accept one parameter, the current dragged item, and return true/false if you want to allow this item to be drag&dropped. By default, true is applied. **enabled** [List](..\\..\\ONIT_LIST\\List.html) of enabled items items (displayed into another column column). Must me an array of object: ```js { id: PropTypes.string, description: PropTypes.string } ``` This field is required. **enabledLabel** Label to be displayed on top of te enabled column **listUpdated** Event for list update notification. It must be a function accepting one parameter, the paramater is an object with the properites ```js { enabled: array, available: array} ``` where enabled and available are arrays with the relevant item list for each one **singleEnabled** If true, only one item can be dragged in the enabled column, overwriting the existing one. If false, items are just appended. ",
    "url": "/onit-next-react-components/1.1.0/docs/DRAG_DROP/DUAL_COLUMN_DRAG_DROP/Dual-column-drag-drop.html",
    "relUrl": "/docs/DRAG_DROP/DUAL_COLUMN_DRAG_DROP/Dual-column-drag-drop.html"
  },"10": {
    "doc": "Error boundary",
    "title": "Error boundary",
    "content": "1. TOC {:toc} --- # Error Boundary [Error boundary](..\\..\\ERRORS\\ERROR_BOUNDARY\\Error-boundary.html) component. Used as wrapper to other components, catches error in their child component tree, log those errors, and display a fallback UI. Use it as container for your pages. ```js import { ErrorBoundary } from '@mitech/onit-next-react-components/dist/errors/ErrorBoundary' ReactDOM.render( , document.getElementById('some-container') ); ``` #### Props {: .no_toc} **children** Anything to be displayed and eventually catched ",
    "url": "/onit-next-react-components/1.1.0/docs/ERRORS/ERROR_BOUNDARY/Error-boundary.html",
    "relUrl": "/docs/ERRORS/ERROR_BOUNDARY/Error-boundary.html"
  },"11": {
    "doc": "Error parser",
    "title": "Error parser",
    "content": "1. TOC {:toc} --- # errorInfo ```js function errorInfo(error, separator = '') ``` Extract a human readable string form the error object, starting from the most meaningful field, falling back to the least meaningful one if needed. Return an empty string if the error cannot be converted to a valid string ``` var error = new Error('You broke my heart!'); console.error(\"Why you're crying?? \"+errorInfo(error)); // prints 'Why you're crying?? You broke my heart!' ``` #### Params {: .no_toc} **error** The error to be displayed **separator** prepend this string to the error string if the error is valorized @return A human readable string error # logToBackend ```js function logToBackend(error, info) ``` Log error data to the backend service. The data will be attached as log trace to the current page log id, which is retrieved via global page variables \"window.LOGID\" #### Params {: .no_toc} **error** The error to be logged **info** A generic string to be logged with the error ",
    "url": "/onit-next-react-components/1.1.0/docs/ERRORS/ERROR_INFO/Error-parser.html",
    "relUrl": "/docs/ERRORS/ERROR_INFO/Error-parser.html"
  },"12": {
    "doc": "Http clients",
    "title": "Http clients",
    "content": "1. TOC {:toc} --- # httpGET ```js async function httpGET(url, parameters = {}, customConfig = {}) ``` [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) based http get helper function. Perform a GET request using JSON request/response parameters. This function will throw an error in case of both internal errors and http errors. ```js import {httpGET} from '@mitech/onit-next-react-components/dist/http' cont response = await httpGET('/some/url',{querystringValue:1, otherQueryStringValue:2}); console.log(await response.json()) ``` #### Params {: .no_toc} **url** The rest http url **parametrs** Querystring parameters. See queryStringBuilder for conversion rules. **customConfig** Js Fetch configuration object #### Returns {: .no_toc} A promise resolving a [fetch response object](https://developer.mozilla.org/en-US/docs/Web/API/Response) # httpPOST ```js async function httpPOST(url, body, customConfig = {}) ``` [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) based http post helper function. Perform a POST request using JSON as request and reposnse content type. The passed in body is attached at the request. NOTE: This function will throw in case of internal fetch error and server http error(like 404/500) ```js import {httpPOST} from '@mitech/onit-next-react-components/dist/http' const response = await httpPOST('/some/url/', { body object}) console.log(await response.json()) ``` Empty responses will make this method to return a nullish body. #### Params {: .no_toc} **url** The rest http url **body** Body to be sent to rest service **customConfig** Js Fetch configuration object #### Returns {: .no_toc} A promise resolving a [fetch response object](https://developer.mozilla.org/en-US/docs/Web/API/Response) # httpPUT ```js async function httpPUT(url, body = {}, customConfig = {}) ``` [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) based http put helper function. Perform a PUT request using JSON as request and reposnse content type. The passed in body is attached at the request. NOTE: This function will throw in case of internal fetch error and server http error(like 404/500) ```js import {httpPUT} from '@mitech/onit-next-react-components/dist/http' const response = await httpPUT('/some/url/', { body object}) console.log(await response.json()) ``` Empty responses will make this method to return a nullish body. #### Params {: .no_toc} **url** The rest http url **body** Body to be sent to rest service **customConfig** Js Fetch configuration object. #### Returns {: .no_toc} A promise resolving a [fetch response object](https://developer.mozilla.org/en-US/docs/Web/API/Response) # httpPATCH ```js async function httpPATCH(url, body = {}, customConfig = {}) ``` [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) based http patch helper function. Perform a PATCH request using JSON as request and reposnse content type. The passed in body is attached at the request. NOTE: This function will throw in case of internal fetch error and server http error(like 404/500) ```js import {httpPATCH} from '@mitech/onit-next-react-components/dist/http' const response = await httpPATCH('/some/url/', { body object}) console.log(await response.json()) ``` Empty responses will make this method to return a nullish body. #### Params {: .no_toc} **url** The rest http url **body** Body to be sent to rest service **customConfig** Js Fetch configuration object #### Returns {: .no_toc} A promise resolving a [fetch response object](https://developer.mozilla.org/en-US/docs/Web/API/Response) # httpDELETE ```js async function httpDELETE(url, customConfig = {}) ``` [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) based http delete helper function. Perform a DELETE request using JSON as request and reposnse content type. The passed in body is attached at the request. NOTE: This function will throw in case of internal fetch error and server http error(like 404/500) ```js import {httpDELETE} from '@mitech/onit-next-react-components/dist/http' const response = await httpDELETE('/some/url'); ``` Empty responses will make this method to return a nullish body. #### Params {: .no_toc} **url** **customConfig** Js Fetch configuration object #### Returns {: .no_toc} A promise resolving a [fetch response object](https://developer.mozilla.org/en-US/docs/Web/API/Response) ",
    "url": "/onit-next-react-components/1.1.0/docs/HTTP/HTTP_CLIENT/Http-clients.html",
    "relUrl": "/docs/HTTP/HTTP_CLIENT/Http-clients.html"
  },"13": {
    "doc": "Internationalization",
    "title": "Internationalization",
    "content": "1. TOC {:toc} --- # i18n [Internationalization](..\\I18N\\Internationalization.html) handler. This handler return the label as plain text. ```js import {i18nHtml} from '@mitech/onit-next-react-components/dist/i18n' console.log(i18n('translateLabel')) ``` #### Params {: .no_toc} **label** The label to be translated **replaceValues** the list of values to be replaced to %s in the label translated text (like sprintf) example: - translated label = 'hi %s' - replaceValues = 'ivan!' - result 'hi ivan!' An arbitrary number of %s is supported, just provide the right amount of parameters #### Returns {: .no_toc} The translated string # i18nHtml [Internationalization](..\\I18N\\Internationalization.html) handler. This handler suports html styling, but use with care since it's implemented by dangerouslySetInnerHTML https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml ```js import {i18nHtml} from '@mitech/onit-next-react-components/dist/i18n' console.log(i18nHtml('translateLabel')) ``` #### Params {: .no_toc} **label** The label to be translated **replaceValues** the list of values to be replaced to %s in the label translated text (like sprintf) example: - translated label = 'hi %s' - replaceValues = 'ivan!' - result 'hi ivan!' An arbitrary number of %s is supported, just provide the right amount of parameters #### Returns {: .no_toc} The translated string or a react element. ",
    "url": "/onit-next-react-components/1.1.0/docs/I18N/Internationalization.html",
    "relUrl": "/docs/I18N/Internationalization.html"
  },"14": {
    "doc": "Labels",
    "title": "Labels",
    "content": "1. TOC {:toc} --- # OnitLabelSelector Label selector component. Display an area where the user can add labels and search them from a provided list. ```js import {OnitLabelSelector} from '@mitech/onit-next-react-components/dist/labels/OnitLabelSelector' ``` #### Props {: .no_toc} **createLabelText** String, label to be displayed in the create area **emptyErrorText** String, label to be displayed in the error area **labelGet** Async function function that will resolve with the labels list. Must return a ```[{id:string, label:string},...,{id:string, label:string}]``` array or reject **labelPost** Async function that will be called when a new label needs to be created. Must return a ```{id:string, label:string}``` object or reject **labels** Array of label objects. Each object is defined as ``` {id: string, label:string} ``` **onChange** Function, called on label selection change **onError** Function, called on error **enableCreation** boolean, Enable or disable the label creation area ",
    "url": "/onit-next-react-components/1.1.0/docs/ONIT_LABEL_SELECTOR/Labels.html",
    "relUrl": "/docs/ONIT_LABEL_SELECTOR/Labels.html"
  },"15": {
    "doc": "List",
    "title": "List",
    "content": "1. TOC {:toc} --- # OnitList Infinite scroll list component. Efficient for display a large list. This component uses 100% of the height of the container and base items to be displayed on it. Items have fixed height, variable/dynamic height items are not supported. Inspired by https://bvaughn.github.io/react-virtualized/#/components/List ```js import {OnitList} from '@mitech/onit-next-react-components/dist/list/OnitList' myFullList = [ {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'}, {text:'ciao'} ] render =() => { (item, index, isSelected) => {item.text}, indice: {index} } ``` #### Props {: .no_toc} **itemHeight** Height, in pixels of each single item **list** Array of objects to be displayed. No specific format is expected, but you should at least provide the **id** property to each item. **onClick** Item click callback. Expected signature: ```function(clickedItem, index)``` **emptyLabel** string, label to be shown when the list of items is empty. **onRightPaddingChange** callback function, emitted when a right padding is introduced due to scrollbar show/hide **selectedItem** object, one of **list** items which will make that item highlighted. Match is performed by object euality (===) or by object id **selectedItemIdsMap** A mapping object in the format ```{someId: bool}``` to highlight multiple elements. if defined, overrides the behavior of selectedItem. Check is made onto object key presence **itemClassName** String, css classnames to be added to each item container. Defaults to \"overflow-hidden\" ",
    "url": "/onit-next-react-components/1.1.0/docs/ONIT_LIST/List.html",
    "relUrl": "/docs/ONIT_LIST/List.html"
  },"16": {
    "doc": "Loading overlay",
    "title": "Loading overlay",
    "content": "1. TOC {:toc} --- # Loading overlay Manage a full-page overlay in order to make the user wait for something to happen. By default, a rotaing spinner is shown at the center of the loading overlay, but this can be customized with setLoadElement. The overlay also catches link to prevent random/unwanted user clicks. ```js import {loadingOverlay} from '@mitech/onit-next-react-components/dist/misc/LoadingOverlay' loadingOverlay.show() loadingOverlay.hide(); loadingOverlay.setLoadElement(html); ``` **show()** When called, the internal overlay counter is increased. When >0, an overlay is added to the page. **hide()** When called, the internal overlay counter is decreased. When it reaches 0, the overlay is removed the page. **setLoadElement(html)** Set the item to be displayed in the central area of the overlay. A rotating spinner is shown as default # show() Show a loading overlay. ``` loadingOverlay.show() ``` # hide() Hide a loading overlay. ``` loadingOverlay.hide() ``` # setLoadElement(html) Changes the internal content of the div overlay. NOTE: this must be called before showing any overlay, once showed, the content is the previous set one (or the default one) #### Params {: .no_toc} **html** String, the html to be set in the overlay ",
    "url": "/onit-next-react-components/1.1.0/docs/UTILITIES/LOADING_OVERLAY/Loading-overlay.html",
    "relUrl": "/docs/UTILITIES/LOADING_OVERLAY/Loading-overlay.html"
  },"17": {
    "doc": "Menu dropdown",
    "title": "Menu dropdown",
    "content": "1. TOC {:toc} --- # OnitDropdownMenu Dropdown component. Create a button that, on click, display a dropdown ```js import {OnitDropdownMenu, OnitDropdownMenuItem, OnitDropdownMEnuDivider} from '@mitech/onit-next-react-components/dist/dropdowns/OnitDropdownMenu' ``` #### Props {: .no_toc} **className** Class applied to the dropdown button **icon** Font awesome icon to be displayed. **imageIcon** Image icon to be displayed (as http url). Override icon if set **disabled** Disable the button if true **dropdownClassName** Css classes to be applied to the dropdown (example: dropdown-menu-right to align at the right) **value** String to be displayed **button** Show as button or simple icon/text. Default true **children** Items to be shown in the dropdown # OnitDropdownMenuItem Dropdown menu item component. Show a single element into MitDropdownMenu component ```js import { OnitDropdownMenuItem } from '@mitech/onit-next-react-components/dist/dropdowns/OnitDropdownMenu' Some children if needed ``` #### Props {: .no_toc} **onClick** click handler function **text** Text to be displayed **icon** Font awesome icon to be displayed. If unset nothig is displayed **value** Some value passed back on click **source** Some value passed back on click as 2nd parameter **className** Css classes to be applied to the item **type** Set the rendered item type: \"placeholder\" make it just a displayed text, \"link\" (default) make a clickable item **children** Optional, something to be encapsulated as item **disabled** Optional flag, a disabled item cannot be clicked ",
    "url": "/onit-next-react-components/1.1.0/docs/DROPDOWN/ONIT_DROPDOWN_MENU/Menu-dropdown.html",
    "relUrl": "/docs/DROPDOWN/ONIT_DROPDOWN_MENU/Menu-dropdown.html"
  },"18": {
    "doc": "Mobile nav bar",
    "title": "Mobile nav bar",
    "content": "1. TOC {:toc} --- # MobileNavBar Mobile nav bar. Used as container for mobile-only bottom navigation bar. ```js import {MobileNavBarItem} from '@mitech/onit-next-react-components/dist/mobileNavBarMobileNavBarItem' import {MobileNavBar} from '@mitech/onit-next-react-components/dist/pageSections/MobileNavBar' ``` #### Props {: .no_toc} **children** A list of MobileNavBarItem # MobileNavBarItem [Mobile nav bar](..\\MOBILE_NAV_BAR\\Mobile-nav-bar.html) item. Describes a single icon to be shown in the mobile-only bottom bar ```js import {MobileNavBarItem} from '@mitech/onit-next-react-components/dist/mobileNavBarMobileNavBarItem' import {MobileNavBar} from '@mitech/onit-next-react-components/dist/pageSections/MobileNavBar' ``` #### Props {: .no_toc} **className** String, css class names to be applied **id** Sring, id of this item. Used to match the relative section by sectionId for show/hide toggling **defaultActive** Boolean, set this specific item as active by default **icon** String, font-awesome or similar icon (fa fa-home as example). Must be a valid string to be put as class for tags. # MobileNavBarItemGroup [Mobile nav bar](..\\MOBILE_NAV_BAR\\Mobile-nav-bar.html) item group ```js import {MobileNavBarItemGroup} from '@mitech/onit-next-react-components/dist/MobileNavBarItemGroup' ``` #### Props {: .no_toc} **className** String, css class name to be applied to the group **children** Items to be placed in the group **borderLeft** Boolean, add a group right border **borderRight** Boolean, add a group left border ",
    "url": "/onit-next-react-components/1.1.0/docs/MOBILE_NAV_BAR/Mobile-nav-bar.html",
    "relUrl": "/docs/MOBILE_NAV_BAR/Mobile-nav-bar.html"
  },"19": {
    "doc": "OnitDraggableTree",
    "title": "OnitDraggableTree",
    "content": "1. TOC {:toc} --- # OnitDraggableTree A Component to display large trees with drag&drop and collapse capability. For large trees, a logic of virtualization is performed to help increase the rendering performances. This component expand to the height and width of his parent container, which must define the styles \"display:flex\" and \"flex-direction:column\" ![draggable tree](..\\..\\images\\b59c85716b1a5ea04241a8d9ebfeff46.png) ```js import {OnitDraggableTree} from '@mitech/onit-next-react-components/dist/tree/OnitDraggableTree' ``` TODO: complete props #### Props {: .no_toc} **enableDragDrop** Boolean, enable or disable drag&drop of elements. Defaults to true **childrenKey** String, name of the key in the node object who contains childs. Defaults to 'children' **textKey** string, name of the key in the node object who contains the text to be displayed. Defaults to 'text' **treeChanged** Function called to notify tree changes **id** Stirng, the id to be assigned to the tree container div. Defaults to a random one. **tree** A object describingte tree: {[childrenKey]: [ {id: 1, [textKey]:'nodo 1', [childrenKey]: [ {id:2, [textKey]:'node 1/1',[childrenKey]: [ {id:10, [textKey]:'node 1/1/1'}, {id:12, [textKey]:'node 1/1/2',[childrenKey]: [ {id:120, [textKey]:'node 1/1/2/1'} ]}, {id:122, [textKey]:'node 1/1/2/2'} ]} ]}, {id: 3, [textKey]:'nodo 2', [childrenKey]: [ {id:4, [textKey]:'node 2/1'} ]} ]} . **contextMenu** A function called on context menu node click. The current node is passed to this function and you must return an array of context menu entries: ```js [{text: 'menu entry text', click: onClickCallback}] ``` Note that to onClickCallback will be passed a parameter: contextMenuClickOperations. This object will contain some useful methods to manipulate the clicked node: **attachAsChild, attachAsBrother, isIdFreeToUse, parentOf**. Returning null (or any falsely value) means 'no context menu to be displayed'. **emptyLabel** Stirng, a label to show in case of empty results on filtering. Needed if searchMode is set. **searchMode** Stirng, if set, add a search input field over the tree. Use one string from: - filter: the input text cause a filtering of the tree to show only the matching nodes ",
    "url": "/onit-next-react-components/1.1.0/docs/TREE/ONIT_DRAGGABLE_TREE/OnitDraggableTree.html",
    "relUrl": "/docs/TREE/ONIT_DRAGGABLE_TREE/OnitDraggableTree.html"
  },"20": {
    "doc": "OnitScrollTabNav",
    "title": "OnitScrollTabNav",
    "content": "1. TOC {:toc} --- # OnitScrollTabNav Container for standard onit navbar ```js import {OnitScrollTabNav, OnitScrollTabPane, OnitScrollTabItem} from '@mitech/onit-next-react-components/dist/tabNav/OnitScrollTabNav' {utility.i18n('SystemPortal.menu.organizationRole')} {utility.i18n('SystemPortal.menu.accountRole')} Infos content Ciaos content ``` #### Props {: .no_toc} **children** Array of OnitScrollTabItem or OnitScrollTabPane components. For each tab you need you should add both a Item and Pane component. **contentClassName** String, css class names to be applied to the content container (pane) **navClassName** String, css class names to be applied to the tabs (item) # OnitScrollTabItem Navbar Item ```js import {OnitScrollTabItem} from '@mitech/onit-next-react-components/dist/tabNav/OnitScrollTabNav' {utility.i18n('SystemPortal.menu.accountRole')} ``` See OnitTab for more info. #### Props {: .no_toc} **name** String, item name. Must be the same over the pane to activate it. **children** Anything to put in the item contents # OnitScrollTabPane Tab pane item ```js import {OnitScrollTabPane} from '@mitech/onit-next-react-components/dist/tabNav/OnitScrollTabNav' Content here ``` See OnitTab for more info. #### Props {: .no_toc} **name** String, item name. Must be the same over the item to activate it **children** Any component to put into the pane **className** Stirng, Pane custom css classes ",
    "url": "/onit-next-react-components/1.1.0/docs/TAB_NAV/SCROLL_TAB_NAV/OnitScrollTabNav.html",
    "relUrl": "/docs/TAB_NAV/SCROLL_TAB_NAV/OnitScrollTabNav.html"
  },"21": {
    "doc": "OnitTabNav",
    "title": "OnitTabNav",
    "content": "1. TOC {:toc} --- # OnitTabNav Container for standard onit navbar ```js import {OnitTabNav, OnitTabPane, OnitTabItem} from '@mitech/onit-next-react-components/dist/tabNav/OnitTabNav' {utility.i18n('SystemPortal.menu.organizationRole')} Infos content {utility.i18n('SystemPortal.menu.accountRole')} Ciaos content ``` #### Props {: .no_toc} **children** Array of OnitTabItem or OnitTabPane components. For each tab you need you should add both a Item and Pane component. **contentClassName** String, css class names to be applied to the content container (pane) # OnitTabItem Navbar Item ```js import {OnitTabItem} from '@mitech/onit-next-react-components/dist/tabNav/OnitTabNav' {utility.i18n('SystemPortal.menu.accountRole')} ``` See OnitTab for more info. #### Props {: .no_toc} **active** Boolean, if true , set this item as currently active tab **name** String, item name. Must be the same over the pane to activate it. **children** Item content # OnitTabPane Tab pane item ```js import {OnitTabPane} from '@mitech/onit-next-react-components/dist/tabNav/OnitTabPane' Content here ``` See OnitTab for more info. #### Props {: .no_toc} **active** Boolean, if true, set this pane as currently active tab **name** String, item name. Must be the same over the item to activate it **children** Pane contents **className** String, pane custom css classes ",
    "url": "/onit-next-react-components/1.1.0/docs/TAB_NAV/SIMPLE_TAB_NAV/OnitTabNav.html",
    "relUrl": "/docs/TAB_NAV/SIMPLE_TAB_NAV/OnitTabNav.html"
  },"22": {
    "doc": "Page sections",
    "title": "Page sections",
    "content": "1. TOC {:toc} --- # FilterListHeader Specific-case container for filter and list wrapping. Use this container if you want to add a header on these two sections and keep it while switching between them on mobile Children of this component must declare a sectionId property to be shown correctly on screen. Children without a sectionId prop will not even be rendered. ```js import {FilterListHeader} from '@mitech/onit-next-react-components/dist/pageSections/FilterListHeader' import {VerticalSection} from '@mitech/onit-next-react-components/dist/pageSections/VerticalSection' I'm a filter! I'm a list ``` #### Props {: .no_toc} **className** Stirng, className to be applied to the main container **common** Any react component you want to show over every section, but under the header **footer** Any react component you want to show under every section. NOTE: need to be tested! **header** Any react component you want to show over every section, above anything else # MenuSection Section for menu. Mainly used to keep and display the menu on mobile ```js import {MenuSection} from '@mitech/onit-next-react-components/dist/pageSections/MenuSection' ``` #### Props {: .no_toc} **className** String, css class names to be applied **title** Anything to be displayed as menu title # PageContainer Full page container. This is the basic element you must use to create a basic react page ```js import {PageContainer} from '@mitech/onit-next-react-components/dist/pageSections/PageContainer' anything else here ``` #### Props {: .no_toc} **children** Any component to be displayed as children # SectionContainer Container for page sections. This is a basic component you should use to create onit pages ```js import {SectionContainer} from '@mitech/onit-next-react-components/dist/pageSections/SectionContainer' import {VerticalSection} from '@mitech/onit-next-react-components/dist/pageSections/VerticalSection' Display me in this section! ``` #### Props {: .no_toc} **children** One or more VerticalSection elements # VerticalSection Section for page with the intent of displaying a column in the page. Uses all the available height. Page: _________________ | | | | Display me in this section! ``` #### Props {: .no_toc} **className** Stirng, css class names to be applied **sectionId** String, unique id of this section. Used on mobile for navigation bar hide/show events **onShow** Function callback triggered on section show. Mainly called on mobile, it's triggered when the user switch in to this section **onHide** Function callback triggered on hide. Mainly called on mobile, it's triggered when the user switch out from this section **defaultVisible** Boolean, for mobile, set this section as the default visible. Does not affect the visibility of the section on desktop. **borderLeft** Boolean, adds a \"faded left border\" to this container to separate it from a leftmost container ",
    "url": "/onit-next-react-components/1.1.0/docs/PAGE_SECTIONS/Page-sections.html",
    "relUrl": "/docs/PAGE_SECTIONS/Page-sections.html"
  },"23": {
    "doc": "Password stranght-meter",
    "title": "Password stranght-meter",
    "content": "1. TOC {:toc} --- # PasswordStrengthMeter Password strenght meter component. Draw a red/yellow/green bar to help the user with password strength. Inspired by http://www.passwordmeter.com/ ```js import {OnitPasswordStrengthMeter} from '@mitech/onit-next-react-components/dist/misc/OnitPasswordStrengthMeter' ``` #### Props {: .no_toc} **password** String, password to be checked ",
    "url": "/onit-next-react-components/1.1.0/docs/UTILITIES/ONIT_PASSWORD_STRENGTH_METER/Password-stranght-meter.html",
    "relUrl": "/docs/UTILITIES/ONIT_PASSWORD_STRENGTH_METER/Password-stranght-meter.html"
  },"24": {
    "doc": "Querystring builder",
    "title": "Querystring builder",
    "content": "1. TOC {:toc} --- # queryStringBuilder ```js function queryStringBuilder(parameters = {}) ``` Convert an object into a querystring. - arrays are converted to \"property=value1&property=value2\" - objects are json-stringified - every parameter is encoded with encodeURIComponent ```js import {queryStringBuilder} from '@mitech/onit-next-react-components/dist/http/queryStringBuilder'; console.log(queryStringBuilder({prop:1, other:1})); ``` #### Params {: .no_toc} **parameters** A key-value object to be converted #### Returns {: .no_toc} The encoded querystirng. You can use this directly, there's no need to apply other encoding levels. ",
    "url": "/onit-next-react-components/1.1.0/docs/HTTP/HTTP_QUERYSTRING_BUILDER/Querystring-builder.html",
    "relUrl": "/docs/HTTP/HTTP_QUERYSTRING_BUILDER/Querystring-builder.html"
  },"25": {
    "doc": "Remote components",
    "title": "Remote components",
    "content": "1. TOC {:toc} --- # Remote components Load a remote component using React.lazy Usage example ```js const RemoteComponent = React.lazy(() => remoteFederatedModuleLoader( 'http://someRemoteUrl:port/path/to/sharedComponents.js', 'app_name', './Component' )); // Use the component ``` Remote app must use ModuleFederationPlugin (in webpack configuration) to export components. An example for plugin sections of webpack for the remote app is the following one: ```js const { ModuleFederationPlugin } = require('webpack').container; webpackConfig = { ... plugins:[ // other plugins new ModuleFederationPlugin({ name: 'app_name', filename: 'sharedComponents.js', exposes: { './Component': './src/some/pat/to/component.jsx' }, shared: { react: { singleton: true }, 'react-dom': { singleton: true } } }) ] ... } ``` NOTE: Webpack config is defined in onit-cli. For exporting pckages, you can extend the config for a specified project by adding 'webpack.config.js' in the main folder of your project ```js module.exports = (webpack, options) => { webpack.plugins.push(new options.ModuleFederationPlugin({ name: 'app_name', filename: 'sharedComponents.js', exposes: { './Component': './src/some/pat/to/component.jsx' }, shared: { react: { singleton: true }, 'react-dom': { singleton: true } } })); return webpack; }; ``` See https://github.com/mitechsrl/onit-next/issues/47 for more info Inspired by: https://dev.to/omher/lets-dynamic-remote-modules-with-webpack-module-federation-2b9m https://webpack.js.org/plugins/module-federation-plugin/ #### Params {: .no_toc} **url** the remote exported file **moduleFederationName** The remote app name **component** the remote component path (The one exported) ",
    "url": "/onit-next-react-components/1.1.0/docs/REMOTE_COMPONENTS/Remote-components.html",
    "relUrl": "/docs/REMOTE_COMPONENTS/Remote-components.html"
  },"26": {
    "doc": "Responsive breakpoints",
    "title": "Responsive breakpoints",
    "content": "1. TOC {:toc} --- # Breakpoint constants Constants for breakpoint implementations. Use them to create your responsive components. ```js import {breakpoints} from '@mitech/onit-next-react-components/dist/breakpoints/BreakpointContants' console.log(breakpoints.SM); // logs 576 console.log(breakpoints.MD); // logs 768 console.log(breakpoints.LG); // logs 992 console.log(breakpoints.XL); // logs 1200 console.log(breakpoints.DEFAULT_MOBILE_BREAKPOINT); // logs 768 ``` # OnDesktop Breakpoint to show children components only on \"desktop devices\". Device detection is execute on backend via https://www.npmjs.com/package/ismobilejs ```js import {OnDesktop} from '@mitech/onit-next-react-components/dist/breakpoints/OnDesktop' show me! ``` #### Props {: .no_toc} **children** The components to be displayed # OnMobile Breakpoint to show children components only on \"mobile devices\". Device detection is execute on backend via https://www.npmjs.com/package/ismobilejs NOTE: Mobile ```js import {OnMobile} from '@mitech/onit-next-react-components/dist/breakpoints/OnMobile' show me! ``` #### Props {: .no_toc} **children** The components to be displayed # OnSmartphone Breakpoint to show children components only on \"smartphone devices\". Device detection is execute on backend via https://www.npmjs.com/package/ismobilejs ```js import {OnSmartphone} from '@mitech/onit-next-react-components/dist/breakpoints/OnSmartphone' show me! ``` #### Props {: .no_toc} **children** The components to be displayed # OnTablet Breakpoint to show children components only on \"tablet devices\". Device detection is execute on backend via https://www.npmjs.com/package/ismobilejs ```js import {OnTablet} from '@mitech/onit-next-react-components/dist/breakpoints/OnTablet' show me! ``` #### Props {: .no_toc} **children** The components to be displayed # ShowBreakpoint Bootstrap inspired display breakpoint for react. Show or hide children based on window size. All breakpoints are inclusive. ```js import {ShowBreakpoint} from '@mitech/onit-next-react-components/dist/breakpoints' some children here ``` #### Props {: .no_toc} **children** The components to be displayed ## Props ### children ### from breakpoint, inclusive, to start showing something ### on fast param to simulate from=value and to=value ### to breakpoint, inclusive, after which stop showing something ",
    "url": "/onit-next-react-components/1.1.0/docs/RESPONSIVE_BREAKPOINTS/Responsive-breakpoints.html",
    "relUrl": "/docs/RESPONSIVE_BREAKPOINTS/Responsive-breakpoints.html"
  },"27": {
    "doc": "Right selector indicator",
    "title": "Right selector indicator",
    "content": "1. TOC {:toc} --- # RightSelectIndicator Show a friendly indicator pointing to the left ```js import {RightSelectIndicator} from '@mitech/onit-next-react-components/dist/misc/RightSelectIndicator' ``` #### Props {: .no_toc} **text** Text to be displayed **pointerFontSize** Any css-compatible size for the displayed text **textClassName** String, css class names to be applied to the text ",
    "url": "/onit-next-react-components/1.1.0/docs/UTILITIES/RIGHT_SELECTOR_INDICATOR/Right-selector-indicator.html",
    "relUrl": "/docs/UTILITIES/RIGHT_SELECTOR_INDICATOR/Right-selector-indicator.html"
  },"28": {
    "doc": "Router",
    "title": "Router",
    "content": "1. TOC {:toc} --- # router.resolve(routeId, append = '') Reslves the route id to an effective route. Note: This perform a backend request and return a promise who will resolve once the url has been resolved ``` import {resolve} from '@mitech/onit-next-react-components/dist/router' console.log(await router.resolve(someId)); ``` #### Params {: .no_toc} **routeId** String, a route id, which is a value defined in backend when you creat a express route. **append** optional extra string attached at the end of the router url. Must start with '/' and will be used to replace url variables **example** append: /heaven/hell resolved url: /path/to/:variable1/and/:variable2 replaced url: /path/to/heaven/and/hell # router.go(routeId, append = '') Redirect the client to a new page identified by routeId. Note: this works only with GET requests ``` import {router} from '@mitech/onit-next-react-components/dist/router' router.go(url, append) ``` #### Params {: .no_toc} **routeId** String, a route id, which is a value defined in backend when you creat a express route. **append** optional extra string attached at the end of the router url. Must start with '/' and will be used to replace url variables **example** append: /heaven/hell resolved url: /path/to/:variable1/and/:variable2 replaced url: /path/to/heaven/and/hell # path.fromCurrentPath(url) Resolve a path from the current location href taking care of the trailing '/' ``` import {router} from '@mitech/onit-next-react-components/dist/router' router.fromCurrentPath(url) ``` **examples** location.href = http://host/path/to/me resolve('./him') = http://host/path/to/me/him location.href = http://host/path/to/me/ resolve('./him') = http://host/path/to/me/him location.href = http://host/path/to/me resolve('../him') = http://host/path/to/him location.href = http://host/path/to/me/ resolve('../him') = http://host/path/to/him #### Params {: .no_toc} **url** String, the url to be resolved #### Returns {: .no_toc} The resolved string ",
    "url": "/onit-next-react-components/1.1.0/docs/ROUTER/Router.html",
    "relUrl": "/docs/ROUTER/Router.html"
  },"29": {
    "doc": "Select input",
    "title": "Select input",
    "content": "1. TOC {:toc} --- # OnitSelectInput Onit standard select component ```js import {OnitSelectInput} from '@mitech/onit-next-react-components/dist/forms/OnitSelectInput' ``` #### Props {: .no_toc} **addEmpty** Automatically add an empty element at the top of the list. Default false. **className** Css class names attached to the html5 input tag **onChange** Onchange event as defined by react checkbox handling. Must be a function accepting two parameters: ```js onchange(event, source){} ``` **options** Array of items, where each item is a string or an object defined like ```js {value|key:any, description|text:string} ``` **readOnly** Make this field not editable **disabled** Set the field as blocked & non editable (with custom classes and behaviors) **source** Generic object returned with the onChange function as second parameter **value** Current select value ",
    "url": "/onit-next-react-components/1.1.0/docs/FORM_COMPONENTS/ONIT_SELECT_INPUT/Select-input.html",
    "relUrl": "/docs/FORM_COMPONENTS/ONIT_SELECT_INPUT/Select-input.html"
  },"30": {
    "doc": "Select item popup",
    "title": "Select item popup",
    "content": "1. TOC {:toc} --- # Select item popup Generic customizable component to show a selection popup. The selection popup displays a filterable list, in which the user can select a single item by clicking on it ![Select item popup](..\\images\\3ec11a3b30ec7849f928587149c70992.png). This component must be used in conjunction with Swal2B. See [Language popup for usage example](https://github.com/mitechsrl/onit-next-react-components/blob/615d508627d2803111bd52ab4132ee901494e9b5/dist/menu/components/LanguagePopUp.jsx) #### Props {: .no_toc} **emptyLabel** String, sabel to be shown on empty list **inputButton** Optional button component to be placed top-right, close to the search field **itemClassName** Callback function, css class item customizator, must accept a single parameter, the current item, and return a string of css classes to be applied to that element **itemIsDisabled** Callback function to detect disabled items. Must accept a parameter , the current item, and return true or false. **itemRender** Single item render. Must accept a parameter, the current item, and return a valid react object **items** Array of objects to be displayed in the selectio list **keyField** String, field, in items objects, which will be used as react component key **onItemClick** Function, callback on single item click **placeholder** String, search field placeholder value, **search** Function, callback function on input search text edit. Can be a promise which will be awaited. Changes to the displayed list must be passed back via items property. **searching** Boolean, if set to true, a overlay preventing any action is added to the popup body **closeOnClick** Boolean, automatic popup close on item click. Defaults to true ",
    "url": "/onit-next-react-components/1.1.0/docs/SELECT_ITEM_POPUP/Select-item-popup.html",
    "relUrl": "/docs/SELECT_ITEM_POPUP/Select-item-popup.html"
  },"31": {
    "doc": "Simple dropdown",
    "title": "Simple dropdown",
    "content": "1. TOC {:toc} --- # OnitDropdown Dropdown component. Create a button that, on click, display a dropdown ```js import {OnitDropdown, OnitDropdownItem, OnitDropdownDivider} from '@mitech/onit-next-react-components/dist/dropdowns/OnitDropdown' ``` #### Props {: .no_toc} **className** Class applied to the dropdown button **icon** Font awesome icon to be displayed. **imageIcon** Image icon to be displayed (as http url). Override icon if set **disabled** Disable the button if true **dropdownClassName** Css classes to be applied to the dropdown (example: dropdown-menu-right to align at the right) **value** String to be displayed in the dropdown button **children** Items to be shown in the dropdown # OnitDropdownItem Dropdown item component. Show a single element into MitDropdownMenu component ```js import {OnitDropdownItem} from '@mitech/onit-next-react-components/dist/dropdowns/OnitDropdown' Some children if needed ``` #### Props {: .no_toc} **onClick** click handler function **text** Text to be displayed **icon** Font awesome icon to be displayed. If unset nothig is displayed **value** Some value passed back on click **source** Some value passed back on click as 2nd parameter **className** Css classes to be applied to the item **type** Set the rendered item type: \"placeholder\" make it just a displayed text, \"link\" (default) make a clickable item **children** Optional, something to be encapsulated as item # OnitDropdownDivider Dropdown horizontal division item. Show a line vertically spaced to separate logically different dropwown items ```js import {OnitDropdownDivider} from '@mitech/onit-next-react-components/dist/dropdowns/OnitDropdown' ``` ",
    "url": "/onit-next-react-components/1.1.0/docs/DROPDOWN/ONIT_DROPDOWN/Simple-dropdown.html",
    "relUrl": "/docs/DROPDOWN/ONIT_DROPDOWN/Simple-dropdown.html"
  },"32": {
    "doc": "Spinners",
    "title": "Spinners",
    "content": "1. TOC {:toc} --- # OnitCenteredSpinner Show a rotating spinner aligned at the horizontal center of its container. To adjust the distance from the top of the container, use the \"mt\" and/or \"pt\" Bootstrap classes. ```js import {OnitCenteredSpinner} from '@mitech/onit-next-react-components/dist/spinner/OnitCenteredSpinner' ``` #### Props {: .no_toc} **className** String, CSS/Bootstrap classes to be applied to the spinner. **spinnerSize** String, the size of the spinner. Note: this prop accepts numbered sizes (from \"size-1\" to \"size-15\") and custom Onit strings (from \"quark\" to \"hulk\") **spinnerColor** Stirng, the color to be applied to the spinner. # OnitSpinner Show a rotating spinner ```js import {OnitSpinner} from '@mitech/onit-next-react-components/dist/spinner/OnitSpinner' ``` #### Props {: .no_toc} **className** String, css classes to be applied to the item ",
    "url": "/onit-next-react-components/1.1.0/docs/SPINNERS/Spinners.html",
    "relUrl": "/docs/SPINNERS/Spinners.html"
  },"33": {
    "doc": "Storage",
    "title": "Storage",
    "content": "1. TOC {:toc} --- # Session storage Session storage helper. Set & get method to access window.sessionStorage # sessionStorage.set(key, value) Set a value in the browser session storage. ``` import {sessionStorage} from '@mitech/onit-next-react-components/dist/storage' sessionStorage.set(key,value) ``` #### Params {: .no_toc} **key** String, key for key-value storage **value** Any object you want to store # sessionStorage.get(key) Get a value from the browser session storage. ``` import {sessionStorage} from '@mitech/onit-next-react-components/dist/storage' sessionStorage.get(key) ``` #### Params {: .no_toc} **key** Key for key-value storage # Local storage Local storage helper. Set & get method to access window.localStorage # localStorage.set(key,value) Set a value in the browser local storage. ``` import {localstorage} from '@mitech/onit-next-react-components/dist/storage' localstorage.set(key,value) ``` #### Params {: .no_toc} **key** String, key for key-value storage **value** Any object you want to store # localStorage.get(key) Get a value from the browser local storage. ``` import {localstorage} from '@mitech/onit-next-react-components/dist/storage' let value = localstorage.get(key) ``` #### Params {: .no_toc} **key** String key for key-value storage # Server storage server storage helper functions: these functions may be async. # serverStorage.set(key, value) Set a value in the backend key-value storage system. ``` import {serverStorage} from '@mitech/onit-next-react-components/dist/storage' serverStorage.set(key,value).then(()=>{console.log(\"done!\")}) ``` #### Params {: .no_toc} **key** String, key for key-value storage **value** Any object you want to store # serverStorage.get(key) Get a value from the backend key-value storage system. ``` import {serverStorage} from '@mitech/onit-next-react-components/dist/storage' const value = await serverStorage.get(key) ``` #### Params {: .no_toc} **key** String, key for key-value storage ",
    "url": "/onit-next-react-components/1.1.0/docs/STORAGE/Storage.html",
    "relUrl": "/docs/STORAGE/Storage.html"
  },"34": {
    "doc": "Sweetalert",
    "title": "Sweetalert",
    "content": "1. TOC {:toc} --- # Sweetalert This component is a react wrapper around Sweetalert, a beautiful, responsive, customizable and accessible (WAI-ARIA) replacement for JavaScript's popup boxes. See [sweetalert2 on GitHub](https://sweetalert2.github.io/) for more info. ```js import {Swal2b} from '@mitech/onit-next-react-components/dist/sweetalert' Swal2b.fire(configObject); ``` See [Sweetalert](..\\SWEETALERT\\Sweetalert.html) [samples](https://sweetalert2.github.io/) and [configuration](https://sweetalert2.github.io/#configuration) for configObject properties # Swal2B.confirm(configObj) Swal2b confirm popup shotcurt. Shows a simple confirm popup. The default options for this shortcurt are: ``` js { icon: 'question', allowEscapeKey: () => !Swal2b.isLoading(), allowOutsideClick: () => !Swal2b.isLoading(), showLoaderOnConfirm: true, showDenyButton: false, showCancelButton: true } ``` #### Params {: .no_toc} **obj** Swal options to extend the default ones. The passed in object DO NOT overwrite this shotcurt options # Swal2B.success(configObj) Swal2b success shotcurt. Show a simple success popup. The default options for this shortcurt are: ``` js { showCloseButton: false, showCancelButton: false, showDenyButton: false, focusConfirm: true } ``` #### Params {: .no_toc} **obj** Swal options to extend the default ones. The passed in object DO NOT overwrite this shotcurt options # Swal2B.warning(configObj) Swal2b warning shotcurt. Show a simple warning popup. The default options for this shortcurt are: ``` js { showCloseButton: false, showCancelButton: false, showDenyButton: false, focusConfirm: true } ``` #### Params {: .no_toc} **obj** Swal options to extend the default ones. The passed in object DO NOT overwrite this shotcurt options # Swal2B.info(configObj) Swal2b info shotcurt. Show a simple info popup. The default options for this shortcurt are: ``` js { showCloseButton: false, showCancelButton: false, showDenyButton: false, focusConfirm: true } ``` #### Params {: .no_toc} **obj** Swal options to extend the default ones. The passed in object DO NOT overwrite this shotcurt options # Swal2B.error(configObj) Swal2b error shotcurt. Show a simple error popup. The default options for this shortcurt are: ``` js { showCloseButton: false, showCancelButton: false, showDenyButton: false, focusConfirm: true } ``` #### Params {: .no_toc} **obj** Swal options to extend the default ones. The passed in object DO NOT overwrite this shotcurt options ",
    "url": "/onit-next-react-components/1.1.0/docs/SWEETALERT/Sweetalert.html",
    "relUrl": "/docs/SWEETALERT/Sweetalert.html"
  },"35": {
    "doc": "Table",
    "title": "Table",
    "content": "1. TOC {:toc} --- # OnitTable Onit table component. This component provide a generic table with virtualization capability, this means that it can manage a large amount of rows without eperiencing significative performance losses. It also provide: - resizeable columns - swappable columns by drag&drop - configuration permanently stored to maintain user configuration for sizes&column positions across multiple sessions Inspired by https://github.com/bvaughn/react-virtualized. ```js import {OnitTable, OnitTableCol, OnitTableHeader, OnitTableHeaderRow, OnitTableRow} from '@mitech/onit-next-react-components/dist/table/OnitTable' // 1st children: header render {header => colonna 1 colonna 2 colonna3 } // 2nd children: row render {(row, index) => {row.data.col2} {row.data.col2} {row.data.col3} } ``` The children of this component represents, in order, the generator functions for: header, row, footer. You can pass these functions via props if you prefer. Inspired by https://react-window.now.sh/#/examples/list/fixed-size https://bvaughn.github.io/react-virtualized/ #### Props {: .no_toc} **children** Onit table components as described in the previous example **columnWidths** Object for column width descriptions, defined as ```js {column1Key: number|percent|fill, column2Key: number,...} ``` where percent is a value like \"20%\", \"fill\" is a value for \"fill the available space\". In case of more 'fill' the available space is shared equally. No check are applied to prevent overflow, the table willjust scroll. All the sizes are calculated against the table container div at first mount,so resizing the window will not resize the table dinamycally. Default size for unspecified columnKeys is 150px. **configStorageKey** String, if customizationStorage is set, use this key to save this table data in the key/value store. Autogenerated from page url if not defined here. **customizationStorage** String or object, defines where to store the columns position and sizes. You can use the string **backend** for storing it in the onit backend key/value system(and have it available for this user in cross-browser/client style), **localStorage** to store in the browser local storage (in case the user change browser or reset the localStorage, customizations will be lost), or an **object** shaped as velow, to provide your own storage endpoint ```js { set: async (key, value) => {} get: async (key) => Promise(value) } ``` **footer** TableFooter component. **TO BE COMPLETED** Onit TableFooter component. Placed automatically at the bottom of the table. **header** TableHeader Component. Placed automatically at the top of the table. If you not define this param, the first child will be used as template generator **rowHeight** Number, defines the rows height, in a fixed unit (possible px). This value is **required** **rowTemplate** Render function for row rendering. If you not define this param, the Render function from children will be used **rows** Array of objects which defines your rows data. Column configurations and field values are managed by the user **move** Boolean, allow columns posizion drag&drop. If set here, will affect all the columns **resize** Boolean allow columns resize. If set here, will affect all the columns # OnitTableCol OnitTable column cell definition component. Column contents are automatically aligned vertically to center, to align also horizontally apply 'text-center' with className. ```js import { OnitTableCol } from '@mitech/onit-next-react-components/dist/table' {item.data.id} ``` #### Props {: .no_toc} **className** String, sss class name to be applied to the current column cell **columnKey** String, **required** Unique identifier for the column **width** Number, column width **children** Anything you want to put in the column content **sticky** Boolean, makes this column sticky to the left # OnitTableHeader Header container. Must contains as children one or more TableHeaderRow components ```js import {OnitTableHeader} from '@mitech/onit-next-react-components/dist/table' headerContent ``` @props children The header content comoponents # OnitTableHeaderRow OnitTable Header row component. Display the table header and, if enabled, manage the column resize/move over the entire table(That's because these actions start from the mouse events over the header). ```js import {OnitTableHeaderRow} from '@mitech/onit-next-react-components/dist/table' {header => colonna 1 colonna 2 colonna3 } ``` #### Props {: .no_toc} **children** Array of OnitTableCol components, defines the row content **className** String, css class to be aplied to the row container **move** Boolean, enable or disable column drag&drop event handler. Default false **height** Any value that defines a valid css height **resize** Boolean, enable or disable resizing event handlers. Default false # OnitTableRow OnitTable row component. ```js import {OnitTableRow} from '@mitech/onit-next-react-components/dist/table' {(row, index) => {row.data.col2} {row.data.col2} {row.data.col3} } ``` #### Props {: .no_toc} **children** Array of OnitTableCol components, defines the row content **className** String, css class to be aplied to the row container **selected** Boolean, if true, mark this row as selected by adding the 'selected' css class. **row** Object, the row data container. **WARNING**: this is an auto.managed prop, just pass in the row variable coming as parameter from the generator function. **resize** Boolean, enable or disable resizing event handlers. Default false **forceUpdate** Boolean, if true forces the row update **index** Number, the row index **onClick** Function, row click callback ",
    "url": "/onit-next-react-components/1.1.0/docs/TABLE/Table.html",
    "relUrl": "/docs/TABLE/Table.html"
  },"36": {
    "doc": "Text input",
    "title": "Text input",
    "content": "1. TOC {:toc} --- # OnitTextInput Generic text input component ```js import {OnitTextInput} from '@mitech/onit-next-react-components/dist/forms/OnitTextInput' ``` #### Props {: .no_toc} **readOnly** Set the field as non editable **disabled** Set the field as blocked & non editable (with custom classes and behaviors) **source** A generic object added to the click event. You can use this parameter to add some data you want back on click. **onChange** Input onchange event. Must be a function defined as ```js function(event, source) { } ``` **onKeyPress** OnKeyPress event. Same as the html5 standard one. **overwriteClassName** Css class to be fully replaced onto the input tag **id** Input id value **placeholder** Generic string show in the input as placeholder text **type** Type of the input element. Must be one from 'number', 'text' or 'password' **value** Current input value **className** Css classes added to the input tag **autoComplete** See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete ",
    "url": "/onit-next-react-components/1.1.0/docs/FORM_COMPONENTS/ONIT_TEXT_INPUT/Text-input.html",
    "relUrl": "/docs/FORM_COMPONENTS/ONIT_TEXT_INPUT/Text-input.html"
  },"37": {
    "doc": "Toast notification",
    "title": "Toast notification",
    "content": "1. TOC {:toc} --- # Toastr This component is a react wrapper around toastr, a Javascript library for non-blocking notifications. jQuery is required. The goal is to create a simple core library that can be customized and extended. See [toastr on GitHub](https://github.com/CodeSeven/toastr) for more info ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.info('show this message!'); toastr.warning('show this message!'); toastr.success('show this message!'); toastr.error('show this message!'); ``` # toastr.success(str) Shortcurt for toastr success notification. Display a green toast with a success message. See [https://github.com/CodeSeven/toastr#other-options](toastr docs) for more info. ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.success('success message'); ``` # toastr.info(str) Shortcurt for toastr info notification. Display a blueish toast with a info message. See [https://github.com/CodeSeven/toastr#other-options](toastr docs) for more info. ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.info('info message'); ``` # toastr.error(str) Shortcurt for toastr error notification. Display a red toast with an error message. See [https://github.com/CodeSeven/toastr#other-options](toastr docs) for more info. ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.error('error message'); ``` # toastr.warning(str) Shortcurt for toastr warning notification. Display a orange/yellow toast with a warning message. See [https://github.com/CodeSeven/toastr#other-options](toastr docs) for more info. ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.warning('warn message'); ``` # toastr.clear() Shortcurt for toastr clear. Removes the current displayed toast using a smooth animation ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.clear(); ``` # toastr.remove() Shortcurt for toastr remove. Removes the current displayed toast immediately without any animation ```js import {toastr} from '@mitech/onit-next-react-components/dist/toastr' toastr.remove(); ``` ",
    "url": "/onit-next-react-components/1.1.0/docs/TOASTR/Toast-notification.html",
    "relUrl": "/docs/TOASTR/Toast-notification.html"
  },"38": {
    "doc": "Toolbar",
    "title": "Toolbar",
    "content": "1. TOC {:toc} --- # OnitToolbar React right toolbar collapsible component. Children components represent each one a tab, children can implement parentToolbarOpened and parentToolbarClosed, two functions that are called on container toolbar open/close. These function can accept a parameter containing the current displayed child index ```js import {OnitToolbar} from '@mitech/onit-next-react-components/dist/toolbar/OnitToolbar' ``` **TODO: Complete doc** #### Props {: .no_toc} **expandClass** String, css class to be applied on expand command **buttons** Array of strings of font-awesome icons to be applied as buttons: ['fa fa-cog', 'fa-fa-truck'] **onOpen** Function called on toolbar open. **onClose** Function called on toolbar close. **children.parentToolbarOpened** Bool, if implemented, called on toolbar open **children.parentToolbarClosed** Bool, if implemented, called on toolbar close **children.toolbarChildDisplayed** Bool, if implemented is called on a child when his tab is displayed ",
    "url": "/onit-next-react-components/1.1.0/docs/TOOLBAR/Toolbar.html",
    "relUrl": "/docs/TOOLBAR/Toolbar.html"
  },"39": {
    "doc": "Tooltip",
    "title": "Tooltip",
    "content": "1. TOC {:toc} --- # Tooltip Enclose any component and show a tooltip on mouse hover. ![Tooltip](..\\images\\706f5a798969d076aa543d06168e8c1d.png) #### Props {: .no_toc} **children** Any component which should make the tooltip appear on **content** String, the tooltip content **placement** String, the tooltip position. Valid values are 'top', 'bottom', 'left' and 'right' **sanitize** Boolean, sanitize the content. This will process the content as html and evantually remove some 'unsafe' tags **className** String, css classes to be added on content ",
    "url": "/onit-next-react-components/1.1.0/docs/TOOLTIP/Tooltip.html",
    "relUrl": "/docs/TOOLTIP/Tooltip.html"
  },"40": {
    "doc": "Tree dropdown",
    "title": "Tree dropdown",
    "content": "1. TOC {:toc} --- # OnitDropdownTree A dropdown menu that can show nested items The items of the menu can be passed directly or loaded asynchronously TODO: - **✓** Add onSelect handler for buttons - Add \"active\" and \"disabled\" classes if the item has the \"active\"/\"disabled\" flag set to true - Add support for items specified as functions or react components - Add support for external menu toggle - Add collapse/expand icons for each submenu (IV: updated to virtualizedList, this point may be difficult now) - **✓** Add support for item id/key, so that react can render the list appropriately #### Props {: .no_toc} **onSelect** handler for selection of a an element **disabled:** [optional] true if the button to open the menu should be disabled **children:** content of the button (can be text or other react components) **searchable:** if true, the button is replaced with an search field. The text is searched in the \"name\" field of each node of the tree **asyncDataFn:** function that returns the menu items in the same format described in dropdownData. It will be called only once: the first time the menu is opened. It will overwrite the data passed in dropdownData. asyncDataFn must be a function that accepts 1 parameter: function(callback) { ... } callback must be called with 2 parameters: callback(error, result) **dropdownData:** array of JS objects containing the items to show ``` [ { \"id\": \"5e8ad83d8be339364c564b14\", \"name\": \"All organizations\", \"link\": \"/system/it_IT/organizations?organization=ALL_ORGS\", \"class\": \"active\", \"method\": \"string, get or post, default get\" \"cb\": function to be called at the end of the user interaction. For get do nothing, for post this will be called at the end of the post request (on success) \"children\": [ { \"id\": \"5e8ae6fa439bdb305b027cb7\", \"name\": \"Luca TEST\", \"link\": \"/system/it_IT/organizations?organization=TEST_LUCA\", \"method\": \"string, get or post, default get\" \"cb\": function to be called at the end of the user interaction. For get do nothing, for post this will be called at the end of the post request (on success) }, { \"id\": \"5e8ae6fa439bdb305b027cb8\", \"name\": \"Gianni TEST\", \"link\": \"/system/it_IT/organizations?organization=TEST_GIANNI\", \"method\": \"string, get or post, default get\" \"cb\": function to be called at the end of the user interaction. For get do nothing, for post this will be called at the end of the post request (on success) } ] } ] ``` attributes of each single item: - id: is of the item. this is the value that will be returned in the onSelect handler - name: name to display - children: [optional] array of children items. Each child item will be indented below its parent. Leave empty/null if the item is a leaf node - link: [optional] url of the url to follow on click - class: [optional] custom class to add to the selected item ",
    "url": "/onit-next-react-components/1.1.0/docs/DROPDOWN/ONIT_DROPDOWN_TREE/Tree-dropdown.html",
    "relUrl": "/docs/DROPDOWN/ONIT_DROPDOWN_TREE/Tree-dropdown.html"
  },"41": {
    "doc": "About",
    "title": "About",
    "content": "# Mitech S.r.L. &nbsp; [Company GitHub page](https://github.com/orgs/mitechsrl) [www.mitechsrl.it](https://www.mitechsrl.it) ",
    "url": "/onit-next-react-components/1.1.0/about/",
    "relUrl": "/about/"
  },"42": {
    "doc": "Tab navigation",
    "title": "Tab navigation",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/TAB_NAV/",
    "relUrl": "/docs/TAB_NAV/"
  },"43": {
    "doc": "Http",
    "title": "Http",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/HTTP/",
    "relUrl": "/docs/HTTP/"
  },"44": {
    "doc": "Errors",
    "title": "Errors",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/ERRORS/",
    "relUrl": "/docs/ERRORS/"
  },"45": {
    "doc": "Drag&Drop",
    "title": "Drag&Drop",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/DRAG_DROP/",
    "relUrl": "/docs/DRAG_DROP/"
  },"46": {
    "doc": "Home - 1.1.0",
    "title": "Home - 1.1.0",
    "content": "# Onit-next-react-components This package provides a series of react components to help the developer write down web pages quicker and easier. This is not a extensive set, it cover the most basic use cases. ### About [Mitech S.r.L](https://www.mitechsrl.it/onit/) ",
    "url": "/onit-next-react-components/1.1.0/docs/HOME/",
    "relUrl": "/docs/HOME/"
  },"47": {
    "doc": "Form components",
    "title": "Form components",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/FORM_COMPONENTS/",
    "relUrl": "/docs/FORM_COMPONENTS/"
  },"48": {
    "doc": "Utilities",
    "title": "Utilities",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/UTILITIES/",
    "relUrl": "/docs/UTILITIES/"
  },"49": {
    "doc": "Code editors",
    "title": "Code editors",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/CODE_EDITORS/",
    "relUrl": "/docs/CODE_EDITORS/"
  },"50": {
    "doc": "Dropdowns",
    "title": "Dropdowns",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/DROPDOWN/",
    "relUrl": "/docs/DROPDOWN/"
  },"51": {
    "doc": "Tree",
    "title": "Tree",
    "content": " ",
    "url": "/onit-next-react-components/1.1.0/docs/TREE/",
    "relUrl": "/docs/TREE/"
  }
}
